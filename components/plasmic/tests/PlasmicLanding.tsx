// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fy2Wd7JJUEGBqb9w6rWnVF
// Component: WpQt0yXXwjjF

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import TestTypeButton from "../../TestTypeButton"; // plasmic-import: Yv82Xv6cbZ8D/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: fy2Wd7JJUEGBqb9w6rWnVF/projectcss
import sty from "./PlasmicLanding.module.css"; // plasmic-import: WpQt0yXXwjjF/css

import MotionBlur2SvgIcon from "./icons/PlasmicIcon__MotionBlur2Svg"; // plasmic-import: U318mCBIhz8C/icon

createPlasmicElementProxy;

export type PlasmicLanding__VariantMembers = {};
export type PlasmicLanding__VariantsArgs = {};
type VariantPropType = keyof PlasmicLanding__VariantsArgs;
export const PlasmicLanding__VariantProps = new Array<VariantPropType>();

export type PlasmicLanding__ArgsType = {
  selectedTestId?: number;
  onSelectedTestIdChange?: (val: string) => void;
  userId?: string;
  userName?: string;
};
type ArgPropType = keyof PlasmicLanding__ArgsType;
export const PlasmicLanding__ArgProps = new Array<ArgPropType>(
  "selectedTestId",
  "onSelectedTestIdChange",
  "userId",
  "userName"
);

export type PlasmicLanding__OverridesType = {
  root?: Flex__<"div">;
  httpRestApiFetcher?: Flex__<typeof DataFetcher>;
  svg?: Flex__<"svg">;
  testTypeButton?: Flex__<typeof TestTypeButton>;
};

export interface DefaultLandingProps {
  selectedTestId?: number;
  onSelectedTestIdChange?: (val: string) => void;
  userId?: string;
  userName?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLanding__RenderFunc(props: {
  variants: PlasmicLanding__VariantsArgs;
  args: PlasmicLanding__ArgsType;
  overrides: PlasmicLanding__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "selectedTestId",
        type: "writable",
        variableType: "number",

        valueProp: "selectedTestId",
        onChangeProp: "onSelectedTestIdChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__jc9Ua)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__ivEzc
          )}
        >
          {
            "!\u0628\u0647 \u062f\u06a9\u062a\u0631 \u062c\u0627\u0646 \u062e\u0648\u0634 \u0627\u0648\u0645\u062f\u06cc\u0646"
          }
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__cWyf
          )}
        >
          {
            ".\u0628\u0631\u0627\u06cc \u0634\u0631\u0648\u0639 \u06cc\u06a9\u06cc \u0627\u0632 \u062a\u0633\u062a\u200c\u0647\u0627\u06cc \u0632\u06cc\u0631 \u0631\u0648 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f"
          }
        </div>
      </Stack__>
      <div className={classNames(projectcss.all, sty.freeBox__owihF)}>
        <DataFetcher
          data-plasmic-name={"httpRestApiFetcher"}
          data-plasmic-override={overrides.httpRestApiFetcher}
          className={classNames("__wab_instance", sty.httpRestApiFetcher)}
          dataName={"fetchedData"}
          errorDisplay={
            <DataCtxReader__>{$ctx => "Error fetching data"}</DataCtxReader__>
          }
          errorName={"fetchError"}
          loadingDisplay={
            <DataCtxReader__>
              {$ctx => (
                <MotionBlur2SvgIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />
              )}
            </DataCtxReader__>
          }
          method={"GET"}
          noLayout={false}
          previewSpinner={false}
          url={"https://n8n-doctorjan.darkube.app/webhook/v1/testsInfo"}
        >
          <DataCtxReader__>
            {$ctx =>
              (_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $ctx.fetchedData;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <TestTypeButton
                    data-plasmic-name={"testTypeButton"}
                    data-plasmic-override={overrides.testTypeButton}
                    className={classNames("__wab_instance", sty.testTypeButton)}
                    key={currentIndex}
                    onClick={async () => {
                      const $steps = {};

                      $steps["updateSelectedTestId"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["selectedTestId"]
                              },
                              operation: 0,
                              value: currentItem.id
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSelectedTestId"] != null &&
                        typeof $steps["updateSelectedTestId"] === "object" &&
                        typeof $steps["updateSelectedTestId"].then ===
                          "function"
                      ) {
                        $steps["updateSelectedTestId"] = await $steps[
                          "updateSelectedTestId"
                        ];
                      }

                      $steps["updateSelectedTestId2"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "rygvhFVbugqfpDLrKooiPY",
                                opId: "8d9e4586-ef06-4cb7-9ed5-e407cd0f620c",
                                userArgs: {
                                  body: [
                                    {
                                      userId: $props.userId,
                                      userName: $props.userName
                                    }
                                  ]
                                },
                                cacheKey: null,
                                invalidatedKeys: ["plasmic_refresh_all"],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSelectedTestId2"] != null &&
                        typeof $steps["updateSelectedTestId2"] === "object" &&
                        typeof $steps["updateSelectedTestId2"].then ===
                          "function"
                      ) {
                        $steps["updateSelectedTestId2"] = await $steps[
                          "updateSelectedTestId2"
                        ];
                      }
                    }}
                    testType={(() => {
                      try {
                        return currentItem.test_name;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                );
              })
            }
          </DataCtxReader__>
        </DataFetcher>
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "httpRestApiFetcher", "svg", "testTypeButton"],
  httpRestApiFetcher: ["httpRestApiFetcher", "svg", "testTypeButton"],
  svg: ["svg"],
  testTypeButton: ["testTypeButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  httpRestApiFetcher: typeof DataFetcher;
  svg: "svg";
  testTypeButton: typeof TestTypeButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLanding__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLanding__VariantsArgs;
    args?: PlasmicLanding__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLanding__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLanding__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLanding__ArgProps,
          internalVariantPropNames: PlasmicLanding__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLanding__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLanding";
  } else {
    func.displayName = `PlasmicLanding.${nodeName}`;
  }
  return func;
}

export const PlasmicLanding = Object.assign(
  // Top-level PlasmicLanding renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    httpRestApiFetcher: makeNodeComponent("httpRestApiFetcher"),
    svg: makeNodeComponent("svg"),
    testTypeButton: makeNodeComponent("testTypeButton"),

    // Metadata about props expected for PlasmicLanding
    internalVariantProps: PlasmicLanding__VariantProps,
    internalArgProps: PlasmicLanding__ArgProps
  }
);

export default PlasmicLanding;
/* prettier-ignore-end */
