// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fy2Wd7JJUEGBqb9w6rWnVF
// Component: dUNsHrAjueyS

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import NoButtonQuestionContainer from "../../NoButtonQuestionContainer"; // plasmic-import: C7Ncz1Tinn1e/component
import YesButtonQuestionContainer from "../../YesButtonQuestionContainer"; // plasmic-import: otY_h98MoPic/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: fy2Wd7JJUEGBqb9w6rWnVF/projectcss
import sty from "./PlasmicQuestionContainer.module.css"; // plasmic-import: dUNsHrAjueyS/css

createPlasmicElementProxy;

export type PlasmicQuestionContainer__VariantMembers = {};
export type PlasmicQuestionContainer__VariantsArgs = {};
type VariantPropType = keyof PlasmicQuestionContainer__VariantsArgs;
export const PlasmicQuestionContainer__VariantProps =
  new Array<VariantPropType>();

export type PlasmicQuestionContainer__ArgsType = {
  question?: string;
  answerYes?: string;
  answerNo?: string;
  onClickYes?: () => void;
  onClickNo?: () => void;
};
type ArgPropType = keyof PlasmicQuestionContainer__ArgsType;
export const PlasmicQuestionContainer__ArgProps = new Array<ArgPropType>(
  "question",
  "answerYes",
  "answerNo",
  "onClickYes",
  "onClickNo"
);

export type PlasmicQuestionContainer__OverridesType = {
  root?: Flex__<"div">;
  text?: Flex__<"div">;
  noButtonQuestionContainer?: Flex__<typeof NoButtonQuestionContainer>;
  yesButtonQuestionContainer?: Flex__<typeof YesButtonQuestionContainer>;
};

export interface DefaultQuestionContainerProps {
  question?: string;
  answerYes?: string;
  answerNo?: string;
  onClickYes?: () => void;
  onClickNo?: () => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicQuestionContainer__RenderFunc(props: {
  variants: PlasmicQuestionContainer__VariantsArgs;
  args: PlasmicQuestionContainer__ArgsType;
  overrides: PlasmicQuestionContainer__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__av9Sf)}
      >
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.question;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "\u0622\u06cc\u0627 \u0645\u062a\u0627\u0647\u0644 \u0647\u0633\u062a\u06cc\u062f\u061f";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__q1Wek)}
        >
          <NoButtonQuestionContainer
            data-plasmic-name={"noButtonQuestionContainer"}
            data-plasmic-override={overrides.noButtonQuestionContainer}
            answerNo={args.answerNo}
            className={classNames(
              "__wab_instance",
              sty.noButtonQuestionContainer
            )}
            onClickNo={args.onClickNo}
          />

          {(() => {
            try {
              return true;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <YesButtonQuestionContainer
              data-plasmic-name={"yesButtonQuestionContainer"}
              data-plasmic-override={overrides.yesButtonQuestionContainer}
              answerYes={args.answerYes}
              className={classNames(
                "__wab_instance",
                sty.yesButtonQuestionContainer
              )}
              onClickYes={args.onClickYes}
            />
          ) : null}
        </Stack__>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "text",
    "noButtonQuestionContainer",
    "yesButtonQuestionContainer"
  ],
  text: ["text"],
  noButtonQuestionContainer: ["noButtonQuestionContainer"],
  yesButtonQuestionContainer: ["yesButtonQuestionContainer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
  noButtonQuestionContainer: typeof NoButtonQuestionContainer;
  yesButtonQuestionContainer: typeof YesButtonQuestionContainer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicQuestionContainer__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicQuestionContainer__VariantsArgs;
    args?: PlasmicQuestionContainer__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicQuestionContainer__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicQuestionContainer__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicQuestionContainer__ArgProps,
          internalVariantPropNames: PlasmicQuestionContainer__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicQuestionContainer__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicQuestionContainer";
  } else {
    func.displayName = `PlasmicQuestionContainer.${nodeName}`;
  }
  return func;
}

export const PlasmicQuestionContainer = Object.assign(
  // Top-level PlasmicQuestionContainer renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    noButtonQuestionContainer: makeNodeComponent("noButtonQuestionContainer"),
    yesButtonQuestionContainer: makeNodeComponent("yesButtonQuestionContainer"),

    // Metadata about props expected for PlasmicQuestionContainer
    internalVariantProps: PlasmicQuestionContainer__VariantProps,
    internalArgProps: PlasmicQuestionContainer__ArgProps
  }
);

export default PlasmicQuestionContainer;
/* prettier-ignore-end */
